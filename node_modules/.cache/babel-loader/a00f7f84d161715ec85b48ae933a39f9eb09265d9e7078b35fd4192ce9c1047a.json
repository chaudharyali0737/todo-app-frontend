{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fsociet\\\\Documents\\\\GitHub\\\\multi-national-estimation\\\\src\\\\components\\\\Todo\\\\todoFunctions.js\",\n  _s = $RefreshSig$();\nimport { deleteTodo, getAllTodos, getOneTodo, insertTodo, updateOneTodo, deleteAllTodos } from \"../../api/api\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./todo.css\";\nimport { Input } from \"@mui/material\";\nimport { Button, Card, Container, Navbar, Table, Alert, Spinner } from \"react-bootstrap\";\n\n// const [id, setId] = useState(0);\n// const [task, setTask] = useState(\"\");\n// const [isGetAll, setIsGetAll] = useState(false);\n\n// const [todoTask, settodoTask] = useState(\"\");\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AllTodo(props) {\n  _s();\n  const [todos, settodos] = useState([]);\n  const [todoTask, settodoTask] = useState(\"\");\n  const [isInserted, setisInserted] = useState(false);\n  const [getOneT, setOneTodo] = useState(\"\");\n  const [todo, settodo] = useState(0);\n  const [isDeleteAll, setIsDeleteAll] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [isDeleted, setIsDeleted] = useState(false);\n  const [deleteTodoID, setdeleteTodoID] = useState(0);\n  const [deleteClickCount, setDeleteClickCount] = useState(0);\n  const [deletePending, setDeletePending] = useState(false);\n  const [itemToDelete, setItemToDelete] = useState(null);\n  useEffect(() => {\n    const getAll = async () => {\n      let result = await getAllTodos();\n      if (result.length > 0) {\n        settodos(result);\n      }\n    };\n    settodos([]);\n    getAll();\n    console.log(\"calls made useEffect \", {\n      // isGetAll,\n      // isDeleted,\n      isInserted,\n      isDeleteAll\n    });\n  }, [isDeleteAll, isInserted, isDeleted]);\n  const insertOneTodo = async () => {\n    insertTodo(todoTask);\n    setisInserted(!isInserted);\n    settodoTask(\"\");\n  };\n  const getOne = async () => {\n    setOneTodo(null);\n    let result2 = await getOneTodo(todo);\n    if (result2.length > 0) {\n      console.log(\"data by getone : \", result2.length);\n      setOneTodo(result2);\n      setShowAlert(false);\n    }\n    if (!result2.id > 0) setShowAlert(true);\n  };\n  const deleteAll = async () => {\n    await deleteAllTodos(); // Wait for the delete operation to complete\n    setIsDeleteAll(!isDeleteAll);\n    settodos(\"\");\n  };\n  const [hoveredRow, setHoveredRow] = useState(null);\n  const handleRowHover = index => {\n    setHoveredRow(index);\n  };\n  const handleRowLeave = () => {\n    setHoveredRow(null);\n  };\n  //   const updateSingleTodo = async () => {\n  //     updateOneTodo(id, task);\n  //     setIsGetAll(!isGetAll);\n  //   };\n\n  const deleteOneTodo = async () => {\n    deleteTodo(deleteTodoID);\n    setIsDeleted(!isDeleted);\n  };\n  const handleDeleteClick = item => {\n    if (deletePending) {\n      // If delete is pending, and the same item is clicked again, trigger delete\n      setItemToDelete(item);\n      setDeletePending(false);\n      deleteOneTodo(item.id);\n    } else {\n      // First click, set delete pending\n      setItemToDelete(item);\n      setDeletePending(true);\n      setDeleteClickCount(1);\n    }\n  };\n  // isGetAll, isDeleted, isInserted, isDeleteAll;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"dark\",\n      expand: \"sm\",\n      variant: \"dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        fluid: true,\n        children: /*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          className: \"mx-auto\",\n          children: \"React TodoList\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"d-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"shadow-lg\",\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: \"10px\",\n              // Padding around the element\n              overflow: \"auto\",\n              // Enable scrolling if the content overflows\n              whiteSpace: \"pre-wrap\",\n              // Preserve line breaks and wrap text\n              color: \"black\",\n              // Text color\n              textAlign: \"center\",\n              // Center align the text content\n              margin: \"19px\" // Add margin to create space around the element\n            },\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"enter task\",\n              variant: \"light\",\n              animation: \"glow\",\n              xs: 4,\n              value: todoTask,\n              onChange: event => settodoTask(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                margin: \"3px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"sm\",\n              className: \"\",\n              variant: \"dark\",\n              expand: \"sm\",\n              onClick: insertOneTodo,\n              children: \"ADD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                margin: \"3px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"sm\",\n              className: \"\",\n              variant: \"dark\",\n              expand: \"sm\",\n              onClick: deleteAll,\n              children: \"Clear All Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Table, {\n            bordered: true,\n            striped: true,\n            responsive: true,\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"ID\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"TASK\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: todos && Array.isArray(todos) && todos.length > 0 ? todos.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                onMouseEnter: () => handleRowHover(index),\n                onMouseLeave: handleRowLeave,\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [\" \", item.task, hoveredRow === index && /*#__PURE__*/_jsxDEV(Button, {\n                    size: \"sm\",\n                    variant: \"info\",\n                    onClick: () => {\n                      setdeleteTodoID(item.id);\n                      handleDeleteClick(item);\n                    },\n                    children: \"Delete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 180,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 23\n                }, this)]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 21\n              }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: \"2\",\n                  children: \"No data available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: \"10px\",\n              // Padding around the element\n              overflow: \"auto\",\n              // Enable scrolling if the content overflows\n              whiteSpace: \"pre-wrap\",\n              // Preserve line breaks and wrap text\n              color: \"black\",\n              // Text color\n              textAlign: \"center\",\n              // Center align the text content\n              margin: \"19px\",\n              // Add margin to create space around the element\n              borderBlockEndColor: \"red\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"enter id\",\n              variant: \"light\",\n              animation: \"glow\",\n              xs: 4,\n              value: todo,\n              onChange: event => settodo(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"sm\",\n              className: \"\",\n              variant: \"dark\",\n              expand: \"sm\",\n              onClick: getOne,\n              children: \"GET\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this), getOneT && Array.isArray(getOneT) && getOneT.length > 0 ? getOneT.map(item => {\n              const createdAt = new Date(item.createdAt);\n              const formattedDate = createdAt.toDateString();\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  backgroundColor: \"#f2f2f2 \"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"ID: \", item.id]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"TASK: \", item.task]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"CreatedAt: \", formattedDate]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 23\n                }, this)]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 21\n              }, this);\n            }) : showAlert ? /*#__PURE__*/_jsxDEV(Alert, {\n              animation: \"grow\",\n              variant: \"danger\",\n              children: \"No data available against this id .\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this) : \"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(AllTodo, \"tKDyFknQFu9Nzh3o+MobShGOoLI=\");\n_c = AllTodo;\nexport default AllTodo;\n\n//   const deleteAll = async () => {\n//     deleteAllTodos();\n//     setIsDeleteAll(!isDeleteAll);\n//     console.log(\"calls made 65 \");\n//   };\n//   const sortedTodos = [...todos].sort((a, b) => a.id - b.id);\n//   const [isButtonVisible, setButtonVisible] = useState(false);\n//   const [activeRowId, setActiveRowId] = useState(null);\n//   const handleMouseEnter = (id) => {\n//     setButtonVisible(true);\n//     setActiveRowId(id);\n//   };\n//   const handleMouseLeave = () => {\n//     setButtonVisible(false);\n//     setActiveRowId(null);\n//   };\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <Table variant=\"stylish\" className=\"list-div\" color=\"white\">\n//         <Tfoot textAlign=\"left\">\n//           <Tr>\n//             <Th>ID</Th>\n//           </Tr>\n//         </Tfoot>\n//         {sortedTodos.map((item) => (\n//           <Tfoot textAlign=\"left\" key={item.id}>\n//             <Tr>\n//               <TableCell>{item.id}</TableCell>\n//             </Tr>\n//           </Tfoot>\n//         ))}\n//       </Table>\n//       <Table variant=\"stylish\" className=\"list-div\" color=\"white\">\n//         <Tfoot textAlign=\"left\">\n//           <Tr>\n//             <Th>TASK</Th>\n//           </Tr>\n//         </Tfoot>\n//         {sortedTodos.map((item) => (\n//           <Tfoot\n//             textAlign=\"left\"\n//             key={item.id}\n//             onMouseEnter={() => handleMouseEnter(item.id)}\n//             onMouseLeave={handleMouseLeave}\n//           >\n//             <Tr>\n//               <TableCell>{item.task}</TableCell>\n//               <Button\n//                 style={{\n//                   display:\n//                     isButtonVisible && item.id === activeRowId\n//                       ? \"block\"\n//                       : \"none\",\n//                 }}\n//                 className={props.button}\n//                 onClick={() => {\n//                   setId(item.id); // Set the ID of the row being edited\n//                 }}\n//               >\n//                 edit\n//               </Button>\n\n//               {item.id === activeRowId && (\n//                 <div>\n//                   <input\n//                     placeholder=\"text\"\n//                     value={task}\n//                     onChange={(event) => setTask(event.target.value)}\n//                   />\n//                   <Button className={props.button} onClick={updateSingleTodo}>\n//                     Save\n//                   </Button>\n//                 </div>\n//               )}\n\n//               <Button\n//                 className={props.button}\n//                 style={{\n//                   display:\n//                     isButtonVisible && item.id === activeRowId\n//                       ? \"block\"\n//                       : \"none\",\n//                 }}\n//                 onClick={() => {\n//                   setdeleteTodoID(item.id);\n//                   deleteOneTodo();\n//                 }}\n//               >\n//                 {\" \"}\n//                 delete\n//               </Button>\n//             </Tr>\n//           </Tfoot>\n//         ))}\n//       </Table>\n//     </div>\n//   );\n// }\nvar _c;\n$RefreshReg$(_c, \"AllTodo\");","map":{"version":3,"names":["deleteTodo","getAllTodos","getOneTodo","insertTodo","updateOneTodo","deleteAllTodos","React","useState","useEffect","Input","Button","Card","Container","Navbar","Table","Alert","Spinner","jsxDEV","_jsxDEV","Fragment","_Fragment","AllTodo","props","_s","todos","settodos","todoTask","settodoTask","isInserted","setisInserted","getOneT","setOneTodo","todo","settodo","isDeleteAll","setIsDeleteAll","showAlert","setShowAlert","isDeleted","setIsDeleted","deleteTodoID","setdeleteTodoID","deleteClickCount","setDeleteClickCount","deletePending","setDeletePending","itemToDelete","setItemToDelete","getAll","result","length","console","log","insertOneTodo","getOne","result2","id","deleteAll","hoveredRow","setHoveredRow","handleRowHover","index","handleRowLeave","deleteOneTodo","handleDeleteClick","item","children","bg","expand","variant","fluid","Brand","className","fileName","_jsxFileName","lineNumber","columnNumber","Body","style","padding","overflow","whiteSpace","color","textAlign","margin","placeholder","animation","xs","value","onChange","event","target","size","onClick","bordered","striped","responsive","Array","isArray","map","onMouseEnter","onMouseLeave","task","colSpan","borderBlockEndColor","createdAt","Date","formattedDate","toDateString","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/fsociet/Documents/GitHub/multi-national-estimation/src/components/Todo/todoFunctions.js"],"sourcesContent":["import {\r\n  deleteTodo,\r\n  getAllTodos,\r\n  getOneTodo,\r\n  insertTodo,\r\n  updateOneTodo,\r\n  deleteAllTodos,\r\n} from \"../../api/api\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./todo.css\";\r\nimport { Input } from \"@mui/material\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Container,\r\n  Navbar,\r\n  Table,\r\n  Alert,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\n\r\n// const [id, setId] = useState(0);\r\n// const [task, setTask] = useState(\"\");\r\n// const [isGetAll, setIsGetAll] = useState(false);\r\n\r\n// const [todoTask, settodoTask] = useState(\"\");\r\n\r\nfunction AllTodo(props) {\r\n  const [todos, settodos] = useState([]);\r\n  const [todoTask, settodoTask] = useState(\"\");\r\n  const [isInserted, setisInserted] = useState(false);\r\n  const [getOneT, setOneTodo] = useState(\"\");\r\n  const [todo, settodo] = useState(0);\r\n  const [isDeleteAll, setIsDeleteAll] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [isDeleted, setIsDeleted] = useState(false);\r\n  const [deleteTodoID, setdeleteTodoID] = useState(0);\r\n  const [deleteClickCount, setDeleteClickCount] = useState(0);\r\n  const [deletePending, setDeletePending] = useState(false);\r\n  const [itemToDelete, setItemToDelete] = useState(null);\r\n  useEffect(() => {\r\n    const getAll = async () => {\r\n      let result = await getAllTodos();\r\n      if (result.length > 0) {\r\n        settodos(result);\r\n      }\r\n    };\r\n    settodos([]);\r\n    getAll();\r\n    console.log(\"calls made useEffect \", {\r\n      // isGetAll,\r\n      // isDeleted,\r\n      isInserted,\r\n      isDeleteAll,\r\n    });\r\n  }, [isDeleteAll, isInserted, isDeleted]);\r\n\r\n  const insertOneTodo = async () => {\r\n    insertTodo(todoTask);\r\n    setisInserted(!isInserted);\r\n    settodoTask(\"\");\r\n  };\r\n  const getOne = async () => {\r\n    setOneTodo(null);\r\n    let result2 = await getOneTodo(todo);\r\n    if (result2.length > 0) {\r\n      console.log(\"data by getone : \", result2.length);\r\n      setOneTodo(result2);\r\n      setShowAlert(false);\r\n    }\r\n    if (!result2.id > 0) setShowAlert(true);\r\n  };\r\n  const deleteAll = async () => {\r\n    await deleteAllTodos(); // Wait for the delete operation to complete\r\n    setIsDeleteAll(!isDeleteAll);\r\n    settodos(\"\");\r\n  };\r\n  const [hoveredRow, setHoveredRow] = useState(null);\r\n\r\n  const handleRowHover = (index) => {\r\n    setHoveredRow(index);\r\n  };\r\n\r\n  const handleRowLeave = () => {\r\n    setHoveredRow(null);\r\n  };\r\n  //   const updateSingleTodo = async () => {\r\n  //     updateOneTodo(id, task);\r\n  //     setIsGetAll(!isGetAll);\r\n  //   };\r\n\r\n  const deleteOneTodo = async () => {\r\n    deleteTodo(deleteTodoID);\r\n\r\n    setIsDeleted(!isDeleted);\r\n  };\r\n  const handleDeleteClick = (item) => {\r\n    if (deletePending) {\r\n      // If delete is pending, and the same item is clicked again, trigger delete\r\n      setItemToDelete(item);\r\n      setDeletePending(false);\r\n      deleteOneTodo(item.id);\r\n    } else {\r\n      // First click, set delete pending\r\n      setItemToDelete(item);\r\n      setDeletePending(true);\r\n      setDeleteClickCount(1);\r\n    }\r\n  };\r\n  // isGetAll, isDeleted, isInserted, isDeleteAll;\r\n  return (\r\n    <>\r\n      <Navbar bg=\"dark\" expand=\"sm\" variant=\"dark\">\r\n        <Container fluid>\r\n          <Navbar.Brand className=\"mx-auto\">React TodoList</Navbar.Brand>\r\n        </Container>\r\n      </Navbar>\r\n      <Container className=\"d-flex justify-content-center\">\r\n        <Card className=\"shadow-lg\">\r\n          <Card.Body>\r\n            <div\r\n              style={{\r\n                padding: \"10px\", // Padding around the element\r\n                overflow: \"auto\", // Enable scrolling if the content overflows\r\n                whiteSpace: \"pre-wrap\", // Preserve line breaks and wrap text\r\n                color: \"black\", // Text color\r\n                textAlign: \"center\", // Center align the text content\r\n                margin: \"19px\", // Add margin to create space around the element\r\n              }}\r\n            >\r\n              <Input\r\n                placeholder=\"enter task\"\r\n                variant=\"light\"\r\n                animation=\"glow\"\r\n                xs={4}\r\n                value={todoTask}\r\n                onChange={(event) => settodoTask(event.target.value)}\r\n              ></Input>\r\n              <span style={{ margin: \"3px\" }}></span>\r\n              <Button\r\n                size=\"sm\"\r\n                className=\"\"\r\n                variant=\"dark\"\r\n                expand=\"sm\"\r\n                onClick={insertOneTodo}\r\n              >\r\n                ADD\r\n              </Button>\r\n              <span style={{ margin: \"3px\" }}></span>\r\n              <Button\r\n                size=\"sm\"\r\n                className=\"\"\r\n                variant=\"dark\"\r\n                expand=\"sm\"\r\n                onClick={deleteAll}\r\n              >\r\n                Clear All Task\r\n              </Button>\r\n            </div>\r\n            <Table bordered striped responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>TASK</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {todos && Array.isArray(todos) && todos.length > 0 ? (\r\n                  todos.map((item, index) => (\r\n                    <tr\r\n                      key={item.id}\r\n                      onMouseEnter={() => handleRowHover(index)}\r\n                      onMouseLeave={handleRowLeave}\r\n                    >\r\n                      <td>{item.id}</td>\r\n                      <td>\r\n                        {\" \"}\r\n                        {item.task}\r\n                        {hoveredRow === index && (\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"info\"\r\n                            onClick={() => {   setdeleteTodoID(item.id)\r\n                              handleDeleteClick(item)}}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        )}\r\n                      </td>\r\n                    </tr>\r\n                  ))\r\n                ) : (\r\n                  <tr>\r\n                    <td colSpan=\"2\">No data available</td>\r\n                  </tr>\r\n                )}\r\n              </tbody>\r\n            </Table>\r\n\r\n            <div\r\n              style={{\r\n                padding: \"10px\", // Padding around the element\r\n                overflow: \"auto\", // Enable scrolling if the content overflows\r\n                whiteSpace: \"pre-wrap\", // Preserve line breaks and wrap text\r\n                color: \"black\", // Text color\r\n                textAlign: \"center\", // Center align the text content\r\n                margin: \"19px\", // Add margin to create space around the element\r\n                borderBlockEndColor: \"red\",\r\n              }}\r\n            >\r\n              <Input\r\n                placeholder=\"enter id\"\r\n                variant=\"light\"\r\n                animation=\"glow\"\r\n                xs={4}\r\n                value={todo}\r\n                onChange={(event) => settodo(event.target.value)}\r\n              ></Input>\r\n              <Button\r\n                size=\"sm\"\r\n                className=\"\"\r\n                variant=\"dark\"\r\n                expand=\"sm\"\r\n                onClick={getOne}\r\n              >\r\n                GET\r\n              </Button>\r\n\r\n              {getOneT && Array.isArray(getOneT) && getOneT.length > 0 ? (\r\n                getOneT.map((item) => {\r\n                  const createdAt = new Date(item.createdAt);\r\n                  const formattedDate = createdAt.toDateString();\r\n                  return (\r\n                    <div key={item.id} style={{ backgroundColor: \"#f2f2f2 \" }}>\r\n                      <p>ID: {item.id}</p>\r\n                      <p>TASK: {item.task}</p>\r\n                      <p>CreatedAt: {formattedDate}</p>\r\n                    </div>\r\n                  );\r\n                })\r\n              ) : showAlert ? (\r\n                <Alert animation=\"grow\" variant=\"danger\">\r\n                  No data available against this id .\r\n                </Alert>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default AllTodo;\r\n\r\n//   const deleteAll = async () => {\r\n//     deleteAllTodos();\r\n//     setIsDeleteAll(!isDeleteAll);\r\n//     console.log(\"calls made 65 \");\r\n//   };\r\n//   const sortedTodos = [...todos].sort((a, b) => a.id - b.id);\r\n//   const [isButtonVisible, setButtonVisible] = useState(false);\r\n//   const [activeRowId, setActiveRowId] = useState(null);\r\n//   const handleMouseEnter = (id) => {\r\n//     setButtonVisible(true);\r\n//     setActiveRowId(id);\r\n//   };\r\n//   const handleMouseLeave = () => {\r\n//     setButtonVisible(false);\r\n//     setActiveRowId(null);\r\n//   };\r\n//   return (\r\n//     <div style={{ display: \"flex\" }}>\r\n//       <Table variant=\"stylish\" className=\"list-div\" color=\"white\">\r\n//         <Tfoot textAlign=\"left\">\r\n//           <Tr>\r\n//             <Th>ID</Th>\r\n//           </Tr>\r\n//         </Tfoot>\r\n//         {sortedTodos.map((item) => (\r\n//           <Tfoot textAlign=\"left\" key={item.id}>\r\n//             <Tr>\r\n//               <TableCell>{item.id}</TableCell>\r\n//             </Tr>\r\n//           </Tfoot>\r\n//         ))}\r\n//       </Table>\r\n//       <Table variant=\"stylish\" className=\"list-div\" color=\"white\">\r\n//         <Tfoot textAlign=\"left\">\r\n//           <Tr>\r\n//             <Th>TASK</Th>\r\n//           </Tr>\r\n//         </Tfoot>\r\n//         {sortedTodos.map((item) => (\r\n//           <Tfoot\r\n//             textAlign=\"left\"\r\n//             key={item.id}\r\n//             onMouseEnter={() => handleMouseEnter(item.id)}\r\n//             onMouseLeave={handleMouseLeave}\r\n//           >\r\n//             <Tr>\r\n//               <TableCell>{item.task}</TableCell>\r\n//               <Button\r\n//                 style={{\r\n//                   display:\r\n//                     isButtonVisible && item.id === activeRowId\r\n//                       ? \"block\"\r\n//                       : \"none\",\r\n//                 }}\r\n//                 className={props.button}\r\n//                 onClick={() => {\r\n//                   setId(item.id); // Set the ID of the row being edited\r\n//                 }}\r\n//               >\r\n//                 edit\r\n//               </Button>\r\n\r\n//               {item.id === activeRowId && (\r\n//                 <div>\r\n//                   <input\r\n//                     placeholder=\"text\"\r\n//                     value={task}\r\n//                     onChange={(event) => setTask(event.target.value)}\r\n//                   />\r\n//                   <Button className={props.button} onClick={updateSingleTodo}>\r\n//                     Save\r\n//                   </Button>\r\n//                 </div>\r\n//               )}\r\n\r\n//               <Button\r\n//                 className={props.button}\r\n//                 style={{\r\n//                   display:\r\n//                     isButtonVisible && item.id === activeRowId\r\n//                       ? \"block\"\r\n//                       : \"none\",\r\n//                 }}\r\n//                 onClick={() => {\r\n//                   setdeleteTodoID(item.id);\r\n//                   deleteOneTodo();\r\n//                 }}\r\n//               >\r\n//                 {\" \"}\r\n//                 delete\r\n//               </Button>\r\n//             </Tr>\r\n//           </Tfoot>\r\n//         ))}\r\n//       </Table>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}